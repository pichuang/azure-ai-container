#!/bin/bash
#
# Host start up script.

# Exit on error
set -e

trap '[ -d "/tmp/lifecycle" ] && touch /tmp/lifecycle/entrypoint-terminating; kill $pid; wait $pid;' TERM


export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
echo "Updated LD_LIBRARY_PATH to $LD_LIBRARY_PATH"

## Helper: read case insensitive environment variable name
function get_env() {
    env | grep -iw "^$1" | head -1 | cut -f 2 -d "="
}

## Helper: Remove environment variable space
function get_trimmed_env() {
  local key="$1"
  local value=$(get_env "$key")
  local trimmed_value=$(echo -n "$value" | tr -d '[:space:]')
  echo "$trimmed_value"
}

StartHost()
{
    # Set of environment variables passed to the host
    echo "========================= ENVIRONMENT VARS ==========================================="
    echo "EULA:                             ${EULA}"
    echo "BILLING:                          ${BILLING}"
    echo "APIKEY:                           ${APIKEY:+***}"
    echo "MODEL_PATH:                       ${MODEL_PATH}"
    echo "MODELS:                           ${MODELS}"
    echo "TRANSLATORSYSTEMCONFIG:           ${TRANSLATORSYSTEMCONFIG}"
    echo "HOTFIXDATAFOLDER:                 ${HOTFIXDATAFOLDER}"
    echo "GENERATEHOTFIXTEMPLATE:           ${GENERATEHOTFIXTEMPLATE}"

    ./Microsoft.CloudAI.Containers.Translator &

    pid=$!
    wait $pid
}

## MODEL DOWNLOAD ##
EULA="$(get_trimmed_env EULA)"
BILLING="$(get_trimmed_env BILLING)"
APIKEY="$(get_trimmed_env APIKEY)"
LANGUAGES="$(get_trimmed_env LANGUAGES)"
CATEGORIES="$(get_trimmed_env CATEGORIES)"
#MoDS endpoint
MODSENVIRONMENT="$(get_trimmed_env MODSENVIRONMENT)"
TRANSLATORSYSTEMCONFIG="$(get_trimmed_env TRANSLATORSYSTEMCONFIG)"
MODELS="$(get_trimmed_env MODELS)"
MountOutput="$(get_trimmed_env  Mounts:Output)"
MountLicense="$(get_trimmed_env  Mounts:License)"
DOWNLOADLICENSE="$(get_trimmed_env  DOWNLOADLICENSE)"
HOTFIXDATAFOLDER="$(get_trimmed_env  HOTFIXDATAFOLDER)"
GENERATEHOTFIXTEMPLATE="$(get_trimmed_env  GENERATEHOTFIXTEMPLATE)"

SRC_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"


# Start the host if MODELS are available locally for disconnected container
if [[ $MODELS != "" && $TRANSLATORSYSTEMCONFIG != "" ]]; then
    #models and config files are provided
    echo "starting host with local models "
    StartHost
# Languages should be specified if we need to download the models
elif [[ $LANGUAGES == "" ]]; then
    echo "Missing parameter Languages"
    exit
elif [[ $GENERATEHOTFIXTEMPLATE == "true" ]]; then
    # HotFixDataFolder should be specified
    if [[ $HOTFIXDATAFOLDER == "" ]]; then

        echo "Missing parameter HOTFIXDATAFOLDER"
        exit
    fi
    source hotfix.sh "$HOTFIXDATAFOLDER" "$LANGUAGES"
# Download the models from MoDS
else
    # Generate unique filenames, so every container run creates new config files in output/Config directory
    configFolderlocation=$MODEL_PATH/Config
    mkdir -p $configFolderlocation
    export  TRANSLATORENV=$configFolderlocation/$(uuidgen)
    export  TRANSLATORSYSTEMCONFIG=$configFolderlocation/$(uuidgen)

    # $SERVICE is set in dockerfile
    # $MODEL_PATH is set in dockerfile
    echo "Starting model download"
    $SRC_DIR/modc --eula "$EULA" --languages "$LANGUAGES" --categories "$CATEGORIES"\
        --billing "$BILLING" --apikey "$APIKEY" --service "$SERVICE" \
        --output "$MODEL_PATH"

    #load env variable from config file generated by modc
    source $TRANSLATORENV

    #refresh local variables with latest env values
    MODELS="$(get_trimmed_env MODELS)"
    TRANSLATORSYSTEMCONFIG="$(get_trimmed_env TRANSLATORSYSTEMCONFIG)"

    if [[ $DOWNLOADLICENSE == "true" ]]; then
         echo ""
         echo "**************************************************************************************"
         echo "Running in download only mode. After download, start container using following command template:"
         echo "   docker run --rm -it -p 5000:5000 -v {SRCMOUNT}:/usr/local/models -e MODELS=${MODELS} -e TRANSLATORSYSTEMCONFIG=${TRANSLATORSYSTEMCONFIG} -e Mounts:Output=${MountOutput} -e Mounts:License=${MountLicense} -e EULA=${EULA} mcr.microsoft.com/azure-cognitive-services/translator/text-translation"
         echo "**************************************************************************************"
         echo ""
     fi

    StartHost
fi